## IMPORT DATA ========================
#dir="/Users/junyinglim/Dropbox/Projects/2015/Peperomia/data/fossilBD/"
#dir="/Users/Marshall_Lab/Dropbox/Projects/2015/Peperomia/data/fossilBD/"

clock_model = "ucln"
maindir = "data/"
loci = ["wanke2007_trnk_trim.nex", "wanke2007_matK_trim.nex"]

taxa = readTaxonData(filename=maindir+"piperales_taxa.tsv")

for(i in 1:loci.size()){
    data[i] = readDiscreteCharacterData(maindir+loci[i])
    data[i].addMissingTaxa(taxa)
}

#data = readDiscreteCharacterData("wanke2007_clean.nex")

n_species <- taxa.size()
n_branches <- 2* n_species - 2

mvi = 1
mni = 1

print("You are running a " + clock_model + " relaxed clock model")


# DEFINE SUBSTITUTION AND TREE MODEL ========================
# Paritioned analysis
for(i in 1:loci.size()){
    # Substitution model parameters
    er[i] ~ dnDirichlet( v(1,1,1,1,1,1) )
    pi[i] ~ dnDirichlet( v(1,1,1,1) )
    moves[mvi++] = mvSimplexElementScale(er[i], alpha = 10, tune = true, weight = 2.0)
    moves[mvi++] = mvSimplexElementScale(pi[i], alpha = 10, tune = true, weight = 2.0)

    # Define rate matrix
    Q[i] := fnGTR(er[i], pi[i])

    # Gamma distributed rate variation
    alpha[i] ~ dnUniform( 0, 1E8 )
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false ) # mean of 1, but shape can vary
    moves[mvi++] = mvScale(alpha[i], weight = 2.0, tune = true)
    alpha[i].setValue(1.0)

    # Proportion of invariant sites
    #pinvar[i] ~ dnBeta(1,1)
    #moves[mvi++] = mvScale(pinvar[i], lambda=2.0, tune=true, weight=1.0)
    #moves[mvi++] = mvScaleBactrian(pinvar[i], lambda=2.0, tune=true, weight=1.0)
    #moves[mvi++] = mvSlide(pinvar[i], delta=1.0, tune=true, weight=1.0)

}

# RELAXED CLOCK MODEL ========================
# relative rates among partitions
proportional_rates ~ dnDirichlet(rep(1, loci.size()))
moves[mvi++] = mvBetaSimplex(proportional_rates, weight=5.0)
relative_rates := loci.size() * proportional_rates

if(clock_model == "ucln"){
    print("initializing ucln")
    branch_rate_mean_log ~ dnUniform(-10.0, 1.0)
    moves[mvi++] = mvSlide(branch_rate_mean_log, delta = 0.01, weight = 5.0, tune = true)
    #moves[mvi++] = mvScale(branch_rate_mean_log, lambda = 1.0, weight = 5.0, tune = true)
    branch_rate_mean := 10^branch_rate_mean_log
    branch_rate_mean_log.setValue(-4.0)

    branch_rate_sd ~ dnExponential(1) # / 0.587405)
    moves[mvi++] = mvScaleBactrian(branch_rate_sd, lambda = 1, weight = 10.0, tune = true)

    for(j in 1:n_branches) {
        branch_rates[j] ~ dnLognormal( ln(branch_rate_mean) - (branch_rate_sd^2)/2, branch_rate_sd)
        moves[mvi++] = mvScaleBactrian(branch_rates[j], lambda=0.5,  weight=2.0)
    }
}
if(clock_model == "uexp"){
    print("initializing uexp")
    branch_rate_mean_log ~ dnUniform(-10, 1)
    branch_rate_mean_log.setValue(-3)
    moves[mvi++] = mvSlide(branch_rate_mean_log, delta = 0.1, weight = 10.0, tune = true)
    branch_rate_mean := 10^branch_rate_mean_log

    for(i in 1:n_branches) {
        branch_rates[i] ~ dnExponential( 1 / branch_rate_mean )
        moves[mvi++] = mvScaleBactrian(branch_rates[i], lambda=0.5,  weight=2.0)
    }
}



## DIVERSIFICATION RATE FOR BIRTH-DEATH TREE MODEL ========================
# Origin time of Piperales (based on UCLN min and max from Magallon et al 2015 New Phytologist)
origin_time ~ dnUniform(127.0, 135.95)
origin_time.setValue(127.0)
moves[mvi++] = mvSlide(origin_time, delta=2, weight=1.0, tune = true) # delta should be about
moves[mvi++] = mvScale(origin_time, lambda=0.5, weight=1.0, tune = true) # lambda is should be less than 1

# Sampling of modern taxa
# 105 species in dataset;
#Piperaceae=Peperomia(1,340)+Piper(2,139)+Manekia(6)+Zippelia(1)+Macropiper(12)+Verhuellia(2);
#Saururaceae = 6
#Aristolochiaceae = 8 genera, (525+121+1+6+1+4+1) includes Lactoris
# Sampling = 105/4165
rho = 0.02521008

# Speciation and extinction rate priors (N0 = 2, Nt = 4,165)
mean_net_diversification_rate := abs(ln(4165.0) / origin_time)
net_diversification_rate_sd   <- 0.587405

net_div_rate ~ dnLognormal( ln(mean_net_diversification_rate) - (net_diversification_rate_sd^2)/2, net_diversification_rate_sd )
moves[mvi++] = mvScaleBactrian(net_div_rate, lambda=1.0, weight=5.0, tune = true)

relative_extinction_rate ~ dnUniform(0,1)
moves[mvi++] = mvSlide(relative_extinction_rate, delta=0.1, weight=5.0, tune=true)
relative_extinction_rate.setValue(0.9)

speciation_rate := abs(net_div_rate / (1 - relative_extinction_rate))
extinction_rate := speciation_rate * relative_extinction_rate

# Fossil sampling rate
#psi ~ dnExponential(1)

psi_log ~ dnUniform(-10, 1)
moves[mvi++] = mvSlide(psi_log, delta=0.5, weight=2.0, tune = true)
psi := 10^psi_log

fbd_dist = dnFBDP(rootAge = origin_time, lambda = speciation_rate, mu = extinction_rate, psi = psi, rho = rho, taxa = taxa)
# NOTE: lambda and mu MUST be stochastic nodes (not deterministic ones)

## FOSSIL CONSTRAINTS ========================
canellales = clade("Drimys_lanceolata", "Pseudowintera_colorata", "Canella_winterana")
aristolochiaceae = clade("Aristolochia_acuminata","Aristolochia_albida","Aristolochia_arborea","Aristolochia_baetica","Aristolochia_bracteolata","Aristolochia_brasiliensis", "Aristolochia_californica","Aristolochia_cf_cordiflora","Aristolochia_chilensis", "Aristolochia_cruenta", "Aristolochia_erecta","Aristolochia_eriantha", "Aristolochia_gigantea", "Aristolochia_gorgona","Aristolochia_macrantha", "Aristolochia_macrophylla", "Aristolochia_manshurensis","Aristolochia_parvifolia", "Aristolochia_pentandra", "Aristolochia_pistolochia","Aristolochia_pitchinchensis", "Aristolochia_reticulata", "Aristolochia_salvadorensis","Aristolochia_serpentaria", "Aristolochia_tomentosa", "Aristolochia_westlandii", "Holostylis_reniforme","Lactoris_fernandeziana", "Pararistolochia_promissa", "Pararistolochia_triactina", "Thottea_cormbosa", "Thottea_dependens", "Thottea_siliquosa","Asarum_caudatum", "Asarum_chingchengense", "Asarum_yakusimense", "Saruma_henryi","Hexagyne_philippiana", "Lactoripollenites_africanus", "Aristolochia_austriaca")
saururaceae = clade("Anemopsis_californica", "Houttuynia_cordata", "Gymnotheca_chinensis", "Saururus_cernuus", "Saururus_chinensis", "Saururus_aquilae", "Saururus_tuckerae", "Saururus_stoobensis", "Houttuynia_bavarica", "Saururopsis_niponensis", "Saururus_bilobatus")
piper = clade("Macropiper_excelsum", "Macropiper_hooglandii", "Piper_aduncum_MAJ076", "Piper_aduncum_MAJ200", "Piper_arieanum", "Piper_augustum", "Piper_auritum", "Piper_bavinum", "Piper_caninum", "Piper_cinereum", "Piper_crocathum", "Piper_decuma", "Piper_flagelicuspe", "Piper_hispidum", "Piper_longum", "Piper_magnificum", "Piper_michelianum", "Piper_muncha", "Piper_nigrum", "Piper_ornatum", "Piper_peltatum", "Piper_penninerve", "Piper_pulchrum", "Piper_reticulatum_MAJ062", "Piper_reticulatum_MAJ128", "Piper_spoliatum", "Piper_subpedale", "Piper_woody", "Trianaeopiper_bullatum", "Trinaeopiper_conifertinodum", "Piper_margaritae", "Piper_bartlingianum") # fossils are here
peperomia = clade("Peperomia_argyreia", "Peperomia_bicolor", "Peperomia_blanda", "Peperomia_clusifolia", "Peperomia_cuspidilimba", "Peperomia_cyclaminoides", "Peperomia_fraseri", "Peperomia_glabella", "Peperomia_graveolens", "Peperomia_hylophila", "Peperomia_inaequalifolia", "Peperomia_macrostachya", "Peperomia_magnolifolia", "Peperomia_marmorata", "Peperomia_maypuensis", "Peperomia_metallica", "Peperomia_perciliata", "Peperomia_pereskifolia", "Peperomia_pernambucensis", "Peperomia_pitcairnensis", "Peperomia_ppucu_ppucu", "Peperomia_r_v_rotundifolia", "Peperomia_rhombea", "Peperomia_spec_Zaire_298N", "Peperomia_trifolia", "Peperomia_tuisana", "Peperomia_vinasiana")
basalpip = clade("Zippelia_begonieaflora", "Manekia_naranjouna", "Manekia_sydowii")
piperaceae = clade(piper, peperomia, basalpip)
pip_pep = clade(piper, peperomia)

ingroup = clade(saururaceae, piperaceae, aristolochiaceae)
saupip = clade(piperaceae, saururaceae)

allconstraints = v(saupip, saururaceae, aristolochiaceae, piperaceae, piper, peperomia, basalpip, canellales, ingroup, pip_pep)

fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=allconstraints)

moves[mvi++] = mvFNPR(fbd_tree, weight = 50.0) # used to be 15
moves[mvi++] = mvNNI(fbd_tree, weight = 50.0) # used to be 0
moves[mvi++] = mvNarrow(fbd_tree, weight = 20.0) # added a new move
moves[mvi++] = mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0) # used to be 6
moves[mvi++] = mvNodeTimeSlideUniform(fbd_tree, weight=40.0) # used to be 40.0 and then 20.0
moves[mvi++] = mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0) # used to be 5

# define fossils
saururaceae_intervals = readDataDelimitedFile(file=maindir+"saururaceae_fossil_interval.tsv", header=true)
piperaceae_intervals = readDataDelimitedFile(file=maindir+"piperaceae_fossil_interval.tsv", header=true)
aristolochiaceae_intervals = readDataDelimitedFile(file=maindir+"aristolochiaceae_fossil_interval.tsv", header=true)

t_counter = 1
fossil_counter = 1

for(i in 1:saururaceae_intervals.size()){
    taxon = saururaceae_intervals[i][1]
    a_i = saururaceae_intervals[i][2]
    b_i = saururaceae_intervals[i][3]
    t[t_counter++] := tmrca(fbd_tree, clade(taxon))
    fossil[fossil_counter++] ~ dnUniform(t[t_counter-1] - b_i, t[t_counter-1] - a_i)
    fossil[fossil_counter-1].clamp( 0 )
}

for(i in 1:piperaceae_intervals.size()){
    taxon = piperaceae_intervals[i][1]
    a_i = piperaceae_intervals[i][2]
    b_i = piperaceae_intervals[i][3]
    t[t_counter++] := tmrca(fbd_tree, clade(taxon))
    fossil[fossil_counter++] ~ dnUniform(t[t_counter-1] - b_i, t[t_counter-1] - a_i)
    fossil[fossil_counter-1].clamp( 0 )
}

for(i in 1:aristolochiaceae_intervals.size()){
    taxon = aristolochiaceae_intervals[i][1]
    a_i = aristolochiaceae_intervals[i][2]
    b_i = aristolochiaceae_intervals[i][3]
    t[t_counter++] := tmrca(fbd_tree, clade(taxon))
    fossil[fossil_counter++] ~ dnUniform(t[t_counter-1] - b_i, t[t_counter-1] - a_i)
    fossil[fossil_counter-1].clamp( 0 )
}

moves[mvi++] = mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=10.0) # used to be 20.0

# Define some monitors that might be interesting
num_samp_anc := fbd_tree.numSampledAncestors()

crownAge_pippep := tmrca(fbd_tree, pip_pep, stemAge = false)
crownAge_piperacaee := tmrca(fbd_tree, piperaceae, stemAge = true)
crownAge_saururaceae := tmrca(fbd_tree, saururaceae, stemAge = false)
stemAge_saururaceae := tmrca(fbd_tree, saururaceae, stemAge = true)


# Add some correlated moves to help with fixing
up_down_scale_index = mvi++
moves[up_down_scale_index] = mvUpDownScale(weight=5.0)
moves[up_down_scale_index].addVariable(fbd_tree, up=true)
moves[up_down_scale_index].addVariable(origin_time, up=true)
moves[up_down_scale_index].addVariable(branch_rate_mean_log, up=false)
moves[up_down_scale_index].addVariable(branch_rates, up=false)

## CREATE PHYLOCTMC MODEL ========================
for(i in 1:loci.size()){
    seq[i] ~ dnPhyloCTMC(tree = fbd_tree,
                         Q = Q[i],
                         branchRates = branch_rates * relative_rates[i],
                         siteRates = gamma_rates[i],
                         type = "DNA")
                         #pInv = pinvar[i])
    seq[i].clamp(data[i])
}
mymodel = model(seq)


## CREATE MONITORS
monitors[mni++] = mnModel(filename="output/" + clock_model + ".log", printgen=10)
monitors[mni++] = mnFile(fbd_tree, filename="output/"+ clock_model + ".trees", printgen=10)
monitors[mni++] = mnScreen(printgen=100, speciation_rate, extinction_rate, psi, branch_rate_mean)


## RUN ANALYSIS
mymcmc = mcmc(mymodel, moves, monitors, nruns = 10)
mymcmc.burnin(2000, tuningInterval = 100)
mymcmc.operatorSummary()
mymcmc.run(100000)

# # SUMMARIZE OUTPUT
# #treetrace = readTreeTrace(output + lineage + "_gene.trees", treetype="clock")
# #map_tree = mapTree(treetrace, output+ lineage + "_gene_map.tre") # maximum a posteriori tree

# #q()
#q()
