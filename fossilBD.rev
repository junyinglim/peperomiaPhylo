## IMPORT DATA ========================
#dir="/Users/junyinglim/Dropbox/Projects/2015/Peperomia/data/fossilBD/"
#dir="/Users/Marshall_Lab/Dropbox/Projects/2015/Peperomia/data/fossilBD/"
dir = "data/"
data = readDiscreteCharacterData(dir+"wanke2007_clean.nex")
taxa = readTaxonData(filename=dir+"piperales_taxa.tsv")
n_species <- taxa.size()
n_branches <- 2* n_species - 2

data.addMissingTaxa(taxa)

mvi = 1
mni = 1

# DEFINE SUBSTITUTION AND TREE MODEL ========================

# Substitution model parameters
er ~ dnDirichlet( v(1,1,1,1,1,1) )
pi ~ dnDirichlet( v(1,1,1,1) )
moves[mvi++] = mvSimplexElementScale(er, alpha = 10, tune = true, weight = 2.0)
moves[mvi++] = mvSimplexElementScale(pi, alpha = 10, tune = true, weight = 2.0)

# Define rate matrix
Q := fnGTR(er, pi)

# Gamma distributed rate variation
# alpha ~ dnExponential( 1.0 ) # hyperprior on shape parameter
alpha ~ dnUniform( 0, 1E8)
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false ) # mean of 1, but shape can vary
moves[mvi++] = mvScale(alpha, weight = 2.0, tune = true)
alpha.setValue(1.0)

# Proportion of invariant sites
# pinvar ~ dnBeta(1,1)
# moves[mvi++] = mvScale(pinvar, lambda=0.1, tune=false, weight=2.0)
# moves[mvi++] = mvSlide(pinvar, delta=10.0, tune=false, weight=2.0)
# pinvar.setValue(3.37E-2)

## DIVERSIFICATION RATE FOR BIRTH-DEATH TREE MODEL ========================
# Origin time of Piperales (based on UCLN min and max from Magallon et al 2015 New Phytologist)

origin_time ~ dnUniform(127.0, 135.95)
origin_time.setValue(127.0)
moves[mvi++] = mvScale(origin_time, lambda=5, weight=5.0, tune = true)

# Sampling of modern taxa
# 105 species in dataset;
#Piperaceae=Peperomia(1,340)+Piper(2,139)+Manekia(6)+Zippelia(1)+Macropiper(12)+Verhuellia(2);
#Saururaceae = 6
#Aristolochiaceae = 8 genera, (525+121+1+6+1+4+1) includes Lactoris
# Sampling = 105/4165
rho=0.02521008

# Speciation and extinction rate priors (N0 = 2, Nt = 4,165)
net_diversification_rate := abs(ln( 4163.0) / origin_time)
speciation_rate ~ dnExponential( lambda = 1/net_diversification_rate )
speciation_rate.setValue(0.05)

turnover ~ dnUniform(0, 1)
extinction_rate := turnover * speciation_rate

moves[mvi++] = mvScale(speciation_rate, lambda=10.0, weight=10.0, tune = true)
moves[mvi++] = mvSlide(speciation_rate, delta=10.0, weight=10.0, tune = true)
moves[mvi++] = mvScale(turnover, lambda=10.0, weight=10.0, tune = true)
moves[mvi++] = mvSlide(turnover, delta=10.0, weight=10.0, tune = true)

# Fossil sampling rate
psi ~ dnExponential(1)
# moves[mvi++] = mvScale(psi, lambda=0.01, weight=1)
# moves[mvi++] = mvScale(psi, lambda=0.1, weight=1)
moves[mvi++] = mvScale(psi, lambda=2, weight=1.0, tune = true)

fbd_dist = dnFBDP(origin = origin_time, lambda = speciation_rate, mu = extinction_rate, psi = psi, rho = rho, taxa = taxa)
# NOTE: lambda and mu MUST be stochastic nodes (not deterministic ones)

## FOSSIL CONSTRAINTS
canellales = clade("Drimys_lanceolata", "Pseudowintera_colorata", "Canella_winterana")
aristolochiaceae = clade("Aristolochia_acuminata","Aristolochia_albida","Aristolochia_arborea","Aristolochia_baetica","Aristolochia_bracteolata","Aristolochia_brasiliensis", "Aristolochia_californica","Aristolochia_cf_cordiflora","Aristolochia_chilensis", "Aristolochia_cruenta", "Aristolochia_erecta","Aristolochia_eriantha", "Aristolochia_gigantea", "Aristolochia_gorgona","Aristolochia_macrantha", "Aristolochia_macrophylla", "Aristolochia_manshurensis","Aristolochia_parvifolia", "Aristolochia_pentandra", "Aristolochia_pistolochia","Aristolochia_pitchinchensis", "Aristolochia_reticulata", "Aristolochia_salvadorensis","Aristolochia_serpentaria", "Aristolochia_tomentosa", "Aristolochia_westlandii","Asarum_caudatum", "Asarum_chingchengense", "Asarum_yakusimense", "Holostylis_reniforme","Lactoris_fernandeziana", "Pararistolochia_promissa", "Pararistolochia_triactina","Saruma_henryi", "Thottea_cormbosa", "Thottea_dependens", "Thottea_siliquosa","Hexagyne_philippiana", "Lactoripollenites_africanus")
saururaceae = clade("Anemopsis_californica", "Houttuynia_cordata", "Gymnotheca_chinensis", "Saururus_cernuus", "Saururus_chinensis", "Saururus_aquilae", "Saururus_tuckerae", "Saururus_bliobatus", "Saururus_stoobensis", "Houttuynia_bavarica", "Saururopsis_niponensis")
piperaceae = clade("Macropiper_excelsum", "Macropiper_hooglandii","Manekia_naranjouna", "Manekia_sydowii", "Peperomia_argyreia", "Peperomia_bicolor", "Peperomia_blanda", "Peperomia_clusifolia", "Peperomia_cuspidilimba", "Peperomia_cyclaminoides", "Peperomia_fraseri", "Peperomia_glabella", "Peperomia_graveolens", "Peperomia_hylophila", "Peperomia_inaequalifolia", "Peperomia_macrostachya", "Peperomia_magnolifolia", "Peperomia_marmorata", "Peperomia_maypuensis", "Peperomia_metallica", "Peperomia_perciliata", "Peperomia_pereskifolia", "Peperomia_pernambucensis", "Peperomia_pitcairnensis", "Peperomia_ppucu_ppucu", "Peperomia_r_v_rotundifolia", "Peperomia_rhombea", "Peperomia_spec_Zaire_298N", "Peperomia_trifolia", "Peperomia_tuisana", "Peperomia_vinasiana", "Piper_aduncum_MAJ076", "Piper_aduncum_MAJ200", "Piper_arieanum", "Piper_augustum", "Piper_auritum", "Piper_bavinum", "Piper_caninum", "Piper_cinereum", "Piper_crocathum", "Piper_decuma", "Piper_flagelicuspe", "Piper_hispidum", "Piper_longum", "Piper_magnificum", "Piper_michelianum", "Piper_muncha", "Piper_nigrum", "Piper_ornatum", "Piper_peltatum", "Piper_penninerve", "Piper_pulchrum", "Piper_reticulatum_MAJ062", "Piper_reticulatum_MAJ128", "Piper_spoliatum", "Piper_subpedale", "Piper_woody", "Trianaeopiper_bullatum", "Trinaeopiper_conifertinodum", "Zippelia_begonieaflora", "Piper_margaritae", "Piper_bartlingianum")

ingroup = clade(saururaceae, piperaceae, aristolochiaceae)
allconstraints = v(saururaceae, piperaceae, aristolochiaceae, canellales)

fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=v(ingroup))

moves[mvi++] = mvFNPR(fbd_tree, weight=15.0)
moves[mvi++] = mvNarrow(fbd_tree, weight = 5.0) # added a new move
moves[mvi++] = mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0)
moves[mvi++] = mvNodeTimeSlideUniform(fbd_tree, weight=40.0)
moves[mvi++] = mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0)

# ## FOSSIL CONSTRAINTS
saururaceae_intervals = readDataDelimitedFile(file=dir + "saururaceae_fossil_interval.tsv", header=true)

piperaceae_intervals = readDataDelimitedFile(file=dir + "piperaceae_fossil_interval.tsv", header=true)

aristolochiaceae_intervals = readDataDelimitedFile(file=dir + "aristolochiaceae_fossil_interval.tsv", header=true)

t_counter = 1
fossil_counter = 1

for(i in 1:saururaceae_intervals.size()){
    taxon = saururaceae_intervals[i][1]
    a_i = saururaceae_intervals[i][2]
    b_i = saururaceae_intervals[i][3]
    
    t[t_counter++] := tmrca(fbd_tree, clade(taxon))
    fossil[fossil_counter++] ~ dnUniform(t[t_counter-1] - b_i, t[t_counter-1] - a_i)
    fossil[fossil_counter-1].clamp( 0 )
}

for(i in 1:piperaceae_intervals.size()){
    taxon = piperaceae_intervals[i][1]
    a_i = piperaceae_intervals[i][2]
    b_i = piperaceae_intervals[i][3]
    t[t_counter++] := tmrca(fbd_tree, clade(taxon))
    fossil[fossil_counter++] ~ dnUniform(t[t_counter-1] - b_i, t[t_counter-1] - a_i)
    fossil[fossil_counter-1].clamp( 0 )
}

for(i in 1:aristolochiaceae_intervals.size()){
    taxon = aristolochiaceae_intervals[i][1]
    a_i = aristolochiaceae_intervals[i][2]
    b_i = aristolochiaceae_intervals[i][3]
    t[t_counter++] := tmrca(fbd_tree, clade(taxon))
    fossil[fossil_counter++] ~ dnUniform(t[t_counter-1] - b_i, t[t_counter-1] - a_i)
    fossil[fossil_counter-1].clamp( 0 )
}

moves[mvi++] = mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=20.0)


# Define some monitors that might be interesting
num_samp_anc := fbd_tree.numSampledAncestors() 
age_piperaceae := tmrca(fbd_tree, piperaceae)

# Clock model
num_rate_categories = 10
ucln_mean ~ dnUniform(1E-6, 10)
ucln_log_mean := ln( ucln_mean )
ucln_sigma <- 1 #~ dnExponential(10.0)
# rate_categories := fnDiscretizeDistribution( dnLognormal( ucln_log_mean, ucln_sigma ), num_rate_categories)
# rate_probs <- simplex(rep(1, num_rate_categories))

# moves[mvi++] = mvSlide(ucln_mean, delta = 3, weight = 5.0, tune = true)
# moves[mvi++] = mvScale(ucln_mean, lambda = 3, weight = 5.0, tune = true)

# for(j in 1:n_branches){
#     branch_rates[j] ~ dnMixture( rate_categories, rate_probs )
#     moves[mvi++] = mvMixtureAllocation( branch_rates[j], weight = 15.0 )
# }

## Non-discretized lognormal
moves[mvi++] = mvSlide(ucln_mean, delta = 3, weight = 5.0, tune = true)
moves[mvi++] = mvScale(ucln_mean, lambda = 3, weight = 5.0, tune = true)

for(j in 1:n_branches){
    branch_rates[j] ~ dnLognormal( ucln_log_mean, ucln_sigma )
    moves[mvi++] = mvScale( branch_rates[j], weight = 3.0, tune = true )
}


## CREATE PHYLOCTMC MODEL ========================
seq ~ dnPhyloCTMC(tree = fbd_tree, Q = Q, branchRates = branch_rates, siteRates = gamma_rates, type = "DNA")
# , pInv = pinvar)
seq.clamp(data)

mymodel = model(seq)


## CREATE MONITORS

monitors[mni++] = mnModel(filename=dir + "fbd.log", printgen=10)
monitors[mni++] = mnFile(fbd_tree, filename= dir + "fbd.trees", printgen=10)
monitors[mni++] = mnScreen(age_piperaceae, printgen=10)

## RUN ANALYSIS
mymcmc = mcmc(mymodel, moves, monitors, nruns = 2)
mymcmc.burnin(25000, tuningInterval = 100)
mymcmc.run(50000)#, underPrior = true)

# # SUMMARIZE OUTPUT
# #treetrace = readTreeTrace(output + lineage + "_gene.trees", treetype="clock")
# #map_tree = mapTree(treetrace, output+ lineage + "_gene_map.tre") # maximum a posteriori tree

# #q()
q()